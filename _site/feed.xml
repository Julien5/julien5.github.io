<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-04-13T11:32:05+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Hello</title><link href="http://localhost:4000/rust/2025/03/31/post.html" rel="alternate" type="text/html" title="Hello" /><published>2025-03-31T07:34:26+02:00</published><updated>2025-03-31T07:34:26+02:00</updated><id>http://localhost:4000/rust/2025/03/31/post</id><content type="html" xml:base="http://localhost:4000/rust/2025/03/31/post.html"><![CDATA[<p>This my first post. I hope it will not be too boring.</p>

<figure class="highlight"><pre><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">_2d</span><span class="p">(</span><span class="n">index</span><span class="p">:</span><span class="nb">usize</span><span class="p">,</span><span class="n">n</span><span class="p">:</span><span class="nb">usize</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="p">(</span><span class="nb">usize</span><span class="p">,</span><span class="nb">usize</span><span class="p">)</span> <span class="p">{</span>
	<span class="nd">assert!</span><span class="p">(</span><span class="n">index</span><span class="o">&lt;</span><span class="p">(</span><span class="n">n</span><span class="o">*</span><span class="n">n</span><span class="p">));</span>
	<span class="k">let</span> <span class="n">x</span><span class="o">=</span><span class="n">index</span><span class="o">%</span><span class="n">n</span><span class="p">;</span>
	<span class="k">let</span> <span class="n">y</span><span class="o">=</span><span class="n">index</span><span class="o">/</span><span class="n">n</span><span class="p">;</span>
	<span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p><a href="https://github.com/julien5">test</a></p>]]></content><author><name></name></author><category term="rust" /><summary type="html"><![CDATA[This my first post. I hope it will not be too boring. fn _2d(index:usize,n:usize) -&gt; (usize,usize) { assert!(index&lt;(n*n)); let x=index%n; let y=index/n; (x,y) }]]></summary></entry><entry><title type="html">Minesweeper (1)</title><link href="http://localhost:4000/rust/2025/03/29/post.html" rel="alternate" type="text/html" title="Minesweeper (1)" /><published>2025-03-29T08:28:19+01:00</published><updated>2025-03-29T08:28:19+01:00</updated><id>http://localhost:4000/rust/2025/03/29/post</id><content type="html" xml:base="http://localhost:4000/rust/2025/03/29/post.html"><![CDATA[<p>So, minesweeper, interview problem at my job.
The problem is given as follows:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Minesweeper C/C++ exercise
1. Generate a NxN Minesweeper-Board with B bombs positioned randomly.
   The parameters N and B are passed as command line arguments.
   N and B are positive integers, B is less than NxN.
  
2. For each position, display the number of bombs in the neighborhood.

Limited Time: 60 minutes.
Clarity and readability of the code will be evaluated first, correctness second.

Example:
$ ./minesweeper 5 2
board:
.*...
..*..
.....
.....
.....

neighbors:
1*21.
12*1.
.111.
.....
.....
</code></pre></div></div>
<p>My first version is <a href="https://github.com/Julien5/sandbox/blob/ae61a93e049e00a3115cbebe63aea0640fe2a147/test/rust/minesweeper/src/main.rs">here</a>. (It took me much more than one hour to do that). Nothing very exciting about this exercise, but if you think of (very) large grids, it can get interesting.</p>

<h2 id="generating-the-bombs">Generating the bombs</h2>

<p>The first idea that comes to mind is the generate random numbers until we have \(B\) distinct numbers, like this</p>

<figure class="highlight"><pre><code class="language-rust" data-lang="rust">		<span class="k">let</span> <span class="k">mut</span> <span class="n">rng</span> <span class="o">=</span> <span class="nn">StdRng</span><span class="p">::</span><span class="nf">from_os_rng</span><span class="p">();</span>
		<span class="k">let</span> <span class="n">B</span><span class="o">=</span><span class="mi">10</span><span class="p">;</span>
		<span class="k">let</span> <span class="n">N</span><span class="o">=</span><span class="mi">10</span><span class="p">;</span>
		<span class="k">let</span> <span class="k">mut</span> <span class="n">set</span><span class="o">=</span><span class="nn">std</span><span class="p">::</span><span class="nn">collections</span><span class="p">::</span><span class="nn">HashSet</span><span class="p">::</span><span class="nf">new</span><span class="p">();</span>
		<span class="k">while</span> <span class="n">set</span><span class="nf">.len</span><span class="p">()</span> <span class="o">!=</span> <span class="n">B</span> <span class="p">{</span>
			<span class="n">set</span><span class="nf">.insert</span><span class="p">(</span><span class="n">rng</span><span class="nf">.random_range</span><span class="p">(</span><span class="mi">0</span><span class="o">..</span><span class="n">N</span><span class="o">*</span><span class="n">N</span><span class="p">));</span>
		<span class="p">}</span></code></pre></figure>

<p>It most cases it works. This could be problematic if there are many bombs (think of the extreme case \(B=N^2\)), but if \(B&gt;\frac{N^2}{2}\) we can invert the logic and generate bomb-free positions instead of bomb positions. Privileging <a href="https://en.wikipedia.org/wiki/Time_complexity">time</a> over <a href="https://en.wikipedia.org/wiki/Space_complexity">space</a> complexity, I choose the <a href="https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle">FisherYates shuffle</a> which make \(B\) <em>distincts</em> random numbers out of any \(B\) random numbers, distincts or not. It has \(O(N^2)\) space complexity (memory requirement).</p>]]></content><author><name></name></author><category term="rust" /><summary type="html"><![CDATA[So, minesweeper, interview problem at my job. The problem is given as follows:]]></summary></entry><entry><title type="html">Hello</title><link href="http://localhost:4000/rust/2025/03/26/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Hello" /><published>2025-03-26T20:15:26+01:00</published><updated>2025-03-26T20:15:26+01:00</updated><id>http://localhost:4000/rust/2025/03/26/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/rust/2025/03/26/welcome-to-jekyll.html"><![CDATA[<p>This my first post. I hope it will not be too boring.</p>

<figure class="highlight"><pre><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">_2d</span><span class="p">(</span><span class="n">index</span><span class="p">:</span><span class="nb">usize</span><span class="p">,</span><span class="n">n</span><span class="p">:</span><span class="nb">usize</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="p">(</span><span class="nb">usize</span><span class="p">,</span><span class="nb">usize</span><span class="p">)</span> <span class="p">{</span>
	<span class="nd">assert!</span><span class="p">(</span><span class="n">index</span><span class="o">&lt;</span><span class="p">(</span><span class="n">n</span><span class="o">*</span><span class="n">n</span><span class="p">));</span>
	<span class="k">let</span> <span class="n">x</span><span class="o">=</span><span class="n">index</span><span class="o">%</span><span class="n">n</span><span class="p">;</span>
	<span class="k">let</span> <span class="n">y</span><span class="o">=</span><span class="n">index</span><span class="o">/</span><span class="n">n</span><span class="p">;</span>
	<span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p><a href="https://github.com/julien5">test</a></p>]]></content><author><name></name></author><category term="rust" /><summary type="html"><![CDATA[This my first post. I hope it will not be too boring. fn _2d(index:usize,n:usize) -&gt; (usize,usize) { assert!(index&lt;(n*n)); let x=index%n; let y=index/n; (x,y) }]]></summary></entry></feed>