<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-04-15T07:27:50+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Minesweeper</title><link href="http://localhost:4000/minesweeper/2025/03/29/post.html" rel="alternate" type="text/html" title="Minesweeper" /><published>2025-03-29T08:28:19+01:00</published><updated>2025-03-29T08:28:19+01:00</updated><id>http://localhost:4000/minesweeper/2025/03/29/post</id><content type="html" xml:base="http://localhost:4000/minesweeper/2025/03/29/post.html"><![CDATA[<p>So, minesweeper, interview coding problem:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Minesweeper C/C++ exercise
1. Generate a NxN's Minesweeper grid with B bombs positioned randomly.
   The parameters N and B are passed as command line arguments.
   N and B are positive integers, B is less than NxN.
  
2. For each position, display the number of bombs in the neighborhood.

Limited Time: 60 minutes.
Clarity and readability of the code will be evaluated first, correctness second.

Example:
$ ./minesweeper 5 2
.*...
..*..
.....
.....
.....

1*21.
12*1.
.111.
.....
.....
</code></pre></div></div>
<p>Applicants are allowed to use any language they want (C, C++) and use google if they need to. I took it as an exercise to learn a bit of rust.</p>

<p>So, this is just about generating a \(NxN\) square grid with \(B\) randomly positioned bombs and count the bombs. This is not about programming the game or solving it. My first version is <a href="https://github.com/Julien5/sandbox/blob/ae61a93e049e00a3115cbebe63aea0640fe2a147/test/rust/minesweeper/src/main.rs">here</a>. (Starting with rust, it took me much more than one hour to get the first working version).</p>

<p>Nothing very exciting about this exercise, but if you think of (very) large grids, it can get interesting. And since I and some coworkers had worked out C/C++ programs for that problem, I was curious to see how rust compares to them.</p>

<h2 id="baseline">Baseline</h2>

<p>The fastest C++ implementation use an array of length \(NxN\) representing the minesweeper grid, and so do i. The baseline rust version has an array with <code class="language-plaintext highlighter-rouge">usize</code> elements. The reason for <code class="language-plaintext highlighter-rouge">usize</code> is the lookup performed in <a href="#printing-the-grid"><code class="language-plaintext highlighter-rouge">print_grid</code></a>, but the element type <code class="language-plaintext highlighter-rouge">usize</code> is quite large (8 bytes on my PC). (In later versions, i changed to Vec<u8>.) The main function:</u8></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const BOMB  : usize = 9;
const ZERO  : usize = 0;

pub fn main(N : usize, B: usize, quiet: bool) {
	let mut grid : Vec&lt;usize&gt; = vec![ZERO; N*N];
	let Bx = distinct_random_numbers(N*N,B);
	for p in &amp;Bx {
		grid[*p]=BOMB;
		increment_neighboors(&amp;mut grid,N,*p);
	}
	// printing without showing the counts
	print_grid(&amp;grid,N,&amp;mut printer, false);
	// printing with the counts
	print_grid(&amp;grid,N,&amp;mut printer, true);
}
</code></pre></div></div>

<h3 id="generating-the-bombs">Generating the bombs</h3>

<p>For the \(B\) randomly positioned bombs, the first idea that comes to mind is to generate random numbers until we have \(B\) distinct numbers, like this</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		let mut set=std::collections::HashSet::new();
		while set.len() != B {
			set.insert(rng.random_range(0..N*N));
		}
</code></pre></div></div>
<p>That may be slow if \(B\) is large (close to \(N^2\).. think of the extreme case where the grid is full of bombs). (There is a trick: if \(B&gt;\frac{N^2}{2}\) we can invert the logic and generate the bomb-free positions instead of bomb positions.) I wanted a fast, deterministic algorithm, privileging <a href="https://en.wikipedia.org/wiki/Time_complexity">time</a> over <a href="https://en.wikipedia.org/wiki/Space_complexity">space</a> complexity, I choose the <a href="https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle">FisherYates shuffle</a> which make \(B\) <em>distincts</em> random numbers out of any \(B\) random numbers, distincts or not. It has \(O(N^2)\) space complexity (memory requirement).</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/// The position arguments is a vector with all possible positions,
/// typically: positions=(0...N*N).collect().
pub fn distinct_random_numbers(mut positions: Vec&lt;usize&gt;, b:usize) -&gt; Vec&lt;usize&gt; {
	let mut rng = StdRng::seed_from_u64(3);
	let L=positions.len();
	// Fisher-Yates
	for i in 0..b {
		let end=L-i;
		let j=rng.random_range(0..end);
		positions.swap(j,end-1);
	}
	let mut G : Vec&lt;usize&gt;=vec![0;b];
	let end=L;
	for i in 0..b  {
		G[i] = positions[end-i-1];
	}
	G
}
</code></pre></div></div>

<h3 id="counting-the-bombs">Counting the bombs</h3>

<p>Assuming \(B&lt;\frac{N^2}{2}\), it is faster to run across bomb positions than to run over all bomb-free positions:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pub fn main(n : usize, b: usize, quiet: bool) {
	let mut grid : Vec&lt;usize&gt; = vec![ZERO; n*n];
	let Bx = distinct_random_numbers(n*n,b);
	for p in &amp;Bx {
		grid[*p]=BOMB;
		increment_neighboors(&amp;mut grid,n,*p);
	}
</code></pre></div></div>
<p>The grid element has length \(NxN\), and we must take care of the edges when iterating over the neighbors positions. This makes quite many <code class="language-plaintext highlighter-rouge">if</code>s.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn increment_neighboors(grid:&amp;mut [usize], nu:usize, pos:usize) {
	// ...
	for dx in [-1,0,1] {
		let posnx=posx+dx;
		if posnx&lt;0 || posnx&gt;=n {
			continue;
		}
		for dy in [-1,0,1] {
			if dx == 0 &amp;&amp; dy == 0 {
				continue
			}
			let posny=posy+dy;
			if posny&lt;0 || posny&gt;=n {
				continue;
			}
			// ...
			// increment the neighboors count
			if grid[lu] != BOMB {
				grid[lu]+=1;
			}
		}
	}
}
</code></pre></div></div>
<p>This quite many <code class="language-plaintext highlighter-rouge">if</code>s is not very nice.</p>

<h3 id="printing-the-grid">Printing the grid</h3>

<p>Printing using <code class="language-plaintext highlighter-rouge">print!</code> or <code class="language-plaintext highlighter-rouge">println!</code> is <a href="https://users.rust-lang.org/t/efficiency-of-println-and-format/52772">slow</a>. It is much faster to write bytes directly to stdout, line by line:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn print_grid(grid:&amp;[usize], n:usize, printer : &amp;mut utils::Printer, show_count:bool) {
	let print_lookup: [u8;11] = match show_count {
		true =&gt; {
			[b' ',b'1',b'2',b'3',b'4',b'5',b'6',b'7',b'8',b'*',b' ']
		}
		_ =&gt; {
			[b' ',b' ',b' ',b' ',b' ',b' ',b' ',b' ',b' ',b'*',b' ']
		}
	};
	let mut output:Vec&lt;u8&gt; = prepare_output(n);
	for ky in 0..n {
		for kx in 0..n {
			let k=from_2d((kx,ky),n);
			output[4*kx+2]=print_lookup[grid[k] as usize];
		}
		printer.print(&amp;output);
	}
}
</code></pre></div></div>
<p>I could not help to make the output more readable with “|” as separators, even if that is a bit slower:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[julien@Z230] minesweeper $ cargo run -- baseline verbose 4 4
[...]
|   | * |   |   |
| * |   |   |   |
|   |   | * |   |
|   | * |   |   |
[...]
| 2 | * | 1 |   |
| * | 3 | 2 | 1 |
| 2 | 3 | * | 1 |
| 1 | * | 2 | 1 |
</code></pre></div></div>

<h2 id="going-parallel-with-tiles">Going Parallel with Tiles</h2>

<p>We want to avoid using mutexes as much as possible. The idea is very simple: divide the large minesweeper grids into many small rectangular tiles (subgrids) of size \((X+2)x(Y+2)\) where \(X=N\) and \(Y=N/K\). Each tile has a margin (hence <code class="language-plaintext highlighter-rouge">X+2</code> and <code class="language-plaintext highlighter-rouge">Y+2</code>), so that we dont loose neighbors for the bomb on the tile edges.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><img src="/assets/minesweeper/tiles.png" alt="tile" /></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">Tiles for N=6,K=3 =&gt; X=6, Y=2</td>
    </tr>
  </tbody>
</table>

<p>When the tiles are merged together for printing, we must take properly care of those edges (this is the <code class="language-plaintext highlighter-rouge">merge</code> function in <a href="https://github.com/Julien5/sandbox/blob/master/test/rust/minesweeper/src/tile.rs">tile.rs</a>). This resulting algorithm is as follows:</p>
<ol>
  <li>Determine \(K\), the number of tiles. (This could be defined by the user.)</li>
  <li>For each k in \({0,...,K-1}\):
    <ul>
      <li>generate a chunk of \(B/K\) bomb positions.</li>
      <li>for each bomb chunk, create one tile, place the bombs and increment neighbors counts.</li>
    </ul>
  </li>
  <li>Aggregate the \(K\) tiles together and fix the counts on the tile edges.</li>
</ol>

<p>Step 2 can be done with concurrency because the chunks and the tiles are indepedant from each other. 
Step 3 could be done in parallel, but not with <a href="https://docs.rs/rayon/latest/rayon/">rayon</a> because of an <a href="https://github.com/rayon-rs/rayon/issues/592">issue</a>.</p>

<p>Implementation with explicit for loops:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// Bchunk = B/K
fn main(X:usize,Y:usize,Bchunk:usize,K:usize,quiet:bool) {
	let mut tiles = Vec::new();
	for index in 0..K {
		let chunk=BombChunk::with_bomb_count(X,Y,index,Bchunk);
		tiles.push(make_tile(chunk));
	}
	let mut acc=TileAccumulator::init();
	for tile in tiles {
		acc.aggregate(tile);
	}
	// print ...
</code></pre></div></div>

<p>The first loop can be reformulated with iterators and <a href="https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.map"><code class="language-plaintext highlighter-rouge">map</code></a>:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	let tiles:Vec&lt;Tile&gt;=(0..K).into_iter()
		.map(|index| {
			let chunk=BombChunk::with_bomb_count(X,Y,index,Bchunk);
			make_tile(chunk)
		}).collect();
</code></pre></div></div>

<p>Thanks to the rayon crate, we just replace the standart iterator with <a href="https://docs.rs/rayon/latest/rayon/iter/index.html">parallel iterators</a> to generate bombs and make tiles concurrently:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	let tiles:Vec&lt;Tile&gt;=(0..K).into_par_iter()
		.map(|index| {
			let chunk=BombChunk::with_bomb_count(X,Y,index,Bchunk);
			make_tile(chunk)
		}).collect();
</code></pre></div></div>

<h2 id="performance">Performance</h2>

<h3 id="baseline-against-tiles">Baseline against Tiles</h3>

<p>First we check that the tiled version with one tile (K=1, i.e. one tile, one thread, no parallelism) is <em>not</em> slower than the baseline.</p>

<p>For our experiments with use large grids. The size \(N\) is set with a parameter L:</p>

\[N=1024*L\]

<p>and we let L varying. The number of bombs \(B\) is set with a parameter D:</p>

\[B=N^2/D\]

<p>and we vary D from 2 (many bombs) to larger values.
Here are the timings I get on my debian box with a i7-4470 CPU and 32Gb RAM.</p>

<table>
  <thead>
    <tr>
      <th>L</th>
      <th>D</th>
      <th>baseline (time in s)</th>
      <th>tiled (time in s)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>4</td>
      <td>2</td>
      <td>1.35</td>
      <td>1.16</td>
    </tr>
    <tr>
      <td>8</td>
      <td>2</td>
      <td>5.65</td>
      <td>5.00</td>
    </tr>
    <tr>
      <td>10</td>
      <td>2</td>
      <td>9.09</td>
      <td>7.81</td>
    </tr>
  </tbody>
</table>

<p>It is not only <em>not</em> slower, it is a little faster. This is because the tiled version has margins and does not need to check boundaries: faster code with less branches. I checked that the baseline get similar timing to the tiled algorithm by manipulating it. If no bombs is on the grid edges and the bound checking is removed, the timings are similar.</p>

<h3 id="concurrency-speed-gain">Concurrency Speed Gain</h3>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><img src="/assets/minesweeper/time-chunks.png" alt="tile" /></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">\(L=8\), \(D=2\)</td>
    </tr>
  </tbody>
</table>

<p>Well, this is faster with more chunks :)</p>

<h3 id="comparison-with-cc">Comparison with C/C++</h3>

<p>The <a href="https://github.com/Julien5/sandbox/blob/master/test/rust/minesweeper/C/margin.cpp">C++ implementation</a> has margins and only one tile (K=1). We can compare it to rust with the tiled version if we set K=1.
Here are the timings (logscale with <code class="language-plaintext highlighter-rouge">log2</code>).</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><img src="/assets/minesweeper/time-array-2.png" alt="tile" /></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">D=2.</td>
    </tr>
  </tbody>
</table>

<p>Rust wins, not by much, but it wins :-)</p>

<h2 id="notes">Notes</h2>

<h3 id="statistical-cost-of-chunking">Statistical Cost Of Chunking</h3>

<p>Generating bomb per tile has a “statistical” cost: the probability of the bomb distribution is not uniform over the large grid anymore. For example the probability of any chunk to have more (or less) than \(B/K\) bombs is zero. At this price we reduce the space complexity.</p>]]></content><author><name></name></author><category term="minesweeper" /><summary type="html"><![CDATA[So, minesweeper, interview coding problem: ``` Minesweeper C/C++ exercise Generate a NxN’s Minesweeper grid with B bombs positioned randomly. The parameters N and B are passed as command line arguments. N and B are positive integers, B is less than NxN. For each position, display the number of bombs in the neighborhood.]]></summary></entry></feed>