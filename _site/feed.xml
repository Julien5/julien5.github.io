<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-05-04T08:38:55+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Minesweeper</title><link href="http://localhost:4000/minesweeper/2025/03/29/post.html" rel="alternate" type="text/html" title="Minesweeper" /><published>2025-03-29T08:28:19+01:00</published><updated>2025-03-29T08:28:19+01:00</updated><id>http://localhost:4000/minesweeper/2025/03/29/post</id><content type="html" xml:base="http://localhost:4000/minesweeper/2025/03/29/post.html"><![CDATA[<p>In his essay <a href="https://en.wikipedia.org/wiki/On_Writing:_A_Memoir_of_the_Craft"><em>On Writing</em></a>, Stephen King advises aspiring writers to begin with a “situation” rather than a fully fleshed-out plot. The idea is to take a simple scenario, like a woman alone in her house with her ex-husband circling outside in the dark, and then “unpack” it to see where the story leads.</p>

<p>At first glance, the world of programming and software development seems disconnected from such scenarios. However, if you look beneath the smooth and flat technological surface, it is shaped by very human forces. As <a href="https://en.wikipedia.org/wiki/Pieter_Hintjens">Pieter Hintjens</a> points out in his excellent <a href="https://zguide.zeromq.org/"><em>The Guide</em></a>, the world of software development is strongly shaped by psychological elements such <a href="https://zguide.zeromq.org/docs/chapter6/#Psychology-of-Software-Architecture">stupidity, selfishness, jealousy, and fear</a>.</p>

<p>A couple of years ago, our team selected a small coding challenge for job candidates. Each team member gave their best effort on that challenge, and unfortunately, my implementation wasn’t the fastest. It might have been the slowest — I don’t quite remember. What I do recall is that it had the lowest memory usage, but it was slow. This blog post is about trying to fix that. I’m going to take the fastest C++ code our team produced, re-implement the same algorithm using my (very modest) beginner Rust skills, and see if that beats C++.</p>

<p>So, definitely, jealousy is at play here. I’m the husband, and I have a rusty knife in hand.</p>

<h2 id="the-coding-challenge">The Coding Challenge</h2>

<p>For those who don’t remember what <a href="https://en.wikipedia.org/wiki/Minesweeper_(video_game)">minesweeper</a> is, an image may be better than a thousand words:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><img src="/assets/minesweeper/kmines.png" alt="image" /></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">(image copied from wikipedia)</td>
    </tr>
  </tbody>
</table>

<p>The problem is given to the candidates as follows:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Minesweeper C/C++ exercise
1. Generate a NxN's Minesweeper grid with B bombs positioned randomly.
   The parameters N and B are passed as command line arguments.
   N and B are positive integers, B is less than NxN.
  
2. For each position, display the number of bombs in the neighborhood.

Limited Time: 60 minutes.
Clarity and readability of the code will be evaluated first, correctness second.

Example:
$ ./minesweeper 5 2
.*...
..*..
.....
.....
.....

1*21.
12*1.
.111.
.....
.....
</code></pre></div></div>
<p>This is just about <strong>generating</strong> a \(N\times N\) square grid with \(B\) randomly positioned bombs and count the bombs. This is <strong>not</strong> about programming a playable game or solving it. Nothing very exciting about this exercise, but if you think of (very) large grids, it can get interesting. My first version is <a href="https://github.com/Julien5/sandbox/blob/ae61a93e049e00a3115cbebe63aea0640fe2a147/test/rust/minesweeper/src/main.rs">here</a>.  (As a Rust beginner, it took me well over an hour to get a working prototype). In this post I discuss algorithms and their Rust implementations. The complete code, including the C++ code used for comparison, is available <a href="https://github.com/Julien5/sandbox/tree/master/test/rust/minesweeper">here</a>.</p>

<h2 id="baseline-rust-version">Baseline Rust version</h2>

<p>The fastest C++ implementation among our team’s C++ solutions is based on an array of length \(N\times N=N^2\) representing the minesweeper grid, and an array of length \(B\) with the bomb positions. I follow the same approach for the Rust implementation, which results in this main function:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const BOMB  : usize = 9;
const ZERO  : usize = 0;

pub fn main(N : usize, B: usize, quiet: bool) {
	let mut grid : Vec&lt;usize&gt; = vec![ZERO; N*N];
	let Bx = distinct_random_numbers(N * N, B);
	for p in &amp;Bx {
		grid[*p]=BOMB;
		increment_neighboors(&amp;mut grid,N,*p);
	}
	// printing without showing the counts
	print_grid(&amp;grid,N,&amp;mut printer, false);
	// printing with the counts
	print_grid(&amp;grid,N,&amp;mut printer, true);
}
</code></pre></div></div>
<p>My initial Rust version has an array with <code class="language-plaintext highlighter-rouge">usize</code> elements. The reason for <code class="language-plaintext highlighter-rouge">usize</code> is the lookup performed in <a href="#printing-the-grid"><code class="language-plaintext highlighter-rouge">print_grid</code></a>, but the element type <code class="language-plaintext highlighter-rouge">usize</code> is quite large (8 bytes on my PC). In later versions, I switched to <code class="language-plaintext highlighter-rouge">Vec&lt;u8&gt;</code> for better memory efficiency.</p>

<h3 id="generating-the-bombs">Generating the bombs</h3>

<p>For the \(B\) randomly positioned bombs, the first idea that comes to mind is to generate random numbers until we have \(B\) distinct numbers, like this</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		let mut set=std::collections::HashSet::new();
		while set.len() != B {
			set.insert(rng.random_range(0..N*N));
		}
</code></pre></div></div>
<p>That may be slow if \(B\) is large… think of the extreme case where the grid is full of bombs. (There is a trick: if \(B&gt;\frac{N^2}{2}\) we can invert the logic and generate the bomb-free positions instead of bomb positions).</p>

<p>I wanted a deterministic algorithm that prioritizes <a href="https://en.wikipedia.org/wiki/Time_complexity">time</a> over <a href="https://en.wikipedia.org/wiki/Space_complexity">space</a> complexity, and chose the Fisher–Yates shuffle. It makes \(B\) <em>distincts</em> random numbers out of any \(B\) random numbers, distincts or not. The trade-off is that it has \(O(N^2)\) space complexity.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// in utils.rs
pub fn fisher_yates_shuffle(mut positions: Vec&lt;usize&gt;, B: usize) -&gt; Vec&lt;usize&gt; {
    let mut rng = StdRng::seed_from_u64(3);
    let L = positions.len();
    for i in 0..B {
        let end = L - i;
        let j = rng.random_range(0..end);
        positions.swap(j, end - 1);
    }
    let mut G: Vec&lt;usize&gt; = vec![0; B];
    let end = L;
    for i in 0..B {
        G[i] = positions[end - i - 1];
    }
    G
}
// in baseline.rs
fn distinct_random_numbers(N: usize, B: usize) -&gt; Vec&lt;usize&gt; {
    // populate the available positions excluding the margins.
    let positions: Vec&lt;usize&gt; = (0..N).collect();
    utils::fisher_yates_shuffle(positions, B)
}
</code></pre></div></div>

<h3 id="counting-the-bombs">Counting the bombs</h3>

<p>Assuming \(B&lt;\frac{N^2}{2}\), it is faster to run over bomb positions than to run over bomb-free positions:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pub fn main(n : usize, b: usize, quiet: bool) {
	let mut grid : Vec&lt;usize&gt; = vec![ZERO; n*n];
	let Bx = distinct_random_numbers(...);
	for p in &amp;Bx {
		grid[*p]=BOMB;
		increment_neighbors(&amp;mut grid,n,*p);
	}
</code></pre></div></div>
<p>The grid element has length \(NxN\), and we must take care of the edges when iterating over the neighbors positions.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn increment_neighboors(grid: &amp;mut [usize], _N: usize, pos: usize) {
    let (posxu, posyu) = to_2d(pos, _N);
    let N = _N as isize;
    let (posx, posy) = (posxu as isize, posyu as isize);
    for dx in [-1, 0, 1] {
        let posnx = posx + dx;
        if posnx &lt; 0 || posnx &gt;= N {
            continue;
        }
        for dy in [-1, 0, 1] {
            if dx == 0 &amp;&amp; dy == 0 {
                continue;
            }
            let posny = posy + dy;
            if posny &lt; 0 || posny &gt;= N {
                continue;
            }
            let l = posny * N + posnx;
            let lu = l as usize;
            if grid[lu] != BOMB {
                grid[lu] += 1;
            }
        }
    }
}
</code></pre></div></div>
<p>Bound checking in the two dimensions introduces two <a href="(https://en.wikipedia.org/wiki/Branch_(computer_science))">conditional branches</a> (“<code class="language-plaintext highlighter-rouge">if</code>”), each incurring a performance penalty, which cost not negligible, as I will experiment later.</p>

<h3 id="printing-the-grid">Printing the grid</h3>

<p>Printing using <code class="language-plaintext highlighter-rouge">print!</code> or <code class="language-plaintext highlighter-rouge">println!</code> is <a href="https://users.rust-lang.org/t/efficiency-of-println-and-format/52772">slow</a>, especially when printing large amounts of data. It is much faster to write bytes directly to standard output. I convert the grid elements to printable characters using a lookup table and print them line by line:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn print_grid(grid:&amp;[usize], n:usize, printer : &amp;mut utils::Printer, show_count:bool) {
	let print_lookup: [u8;11] = match show_count {
		true =&gt; {
			[b' ',b'1',b'2',b'3',b'4',b'5',b'6',b'7',b'8',b'*',b' ']
		}
		_ =&gt; {
			[b' ',b' ',b' ',b' ',b' ',b' ',b' ',b' ',b' ',b'*',b' ']
		}
	};
	let mut output:Vec&lt;u8&gt; = prepare_output(n);
	for ky in 0..n {
		for kx in 0..n {
			let k=from_2d((kx,ky),n);
			output[4*kx+2]=print_lookup[grid[k] as usize];
		}
		printer.print(&amp;output);
	}
}
</code></pre></div></div>

<p>I couldn’t resist making the output more readable by using ‘|’ as separators, even if that is a bit slower:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[julien@Z230] minesweeper $ cargo run -- baseline verbose 4 4
[...]
|   | * |   |   |
| * |   |   |   |
|   |   | * |   |
|   | * |   |   |
[...]
| 2 | * | 1 |   |
| * | 3 | 2 | 1 |
| 2 | 3 | * | 1 |
| 1 | * | 2 | 1 |
</code></pre></div></div>

<p>The baseline Rust code is <a href="https://github.com/Julien5/sandbox/blob/master/test/rust/minesweeper/src/baseline.rs">here</a>. The C++ code is <a href="https://github.com/Julien5/sandbox/blob/master/test/rust/minesweeper/C/">here</a>.</p>

<h2 id="performance">Performance</h2>

<p>The measurements are done on a debian (bookworm) box with a i7-4470 CPU and 32 Gb RAM. The output of the processes under test is redirect to <code class="language-plaintext highlighter-rouge">/dev/null</code>. The script used to measure the performance and generate the graph is <a href="https://github.com/Julien5/sandbox/blob/master/test/rust/minesweeper/measure/main.sh">here</a>.</p>

<p><strong>Is Rust faster?</strong> It is faster.</p>

<p>Well, no, we have to build the code first and Rust is not faster at compiling.</p>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>version</th>
      <th>build flags</th>
      <th>build time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Rust</td>
      <td>rustc 1.84.0</td>
      <td><code class="language-plaintext highlighter-rouge">cargo build --release</code></td>
      <td>1.7 s</td>
    </tr>
    <tr>
      <td>C++</td>
      <td>gcc 12.2.0</td>
      <td><code class="language-plaintext highlighter-rouge">g++ -O3 -DNDEBUG</code></td>
      <td>1.1 s  (<code class="language-plaintext highlighter-rouge">make -j8</code>)</td>
    </tr>
  </tbody>
</table>

<p><strong>Many Bombs</strong></p>

<p>We populate every two position on the grid with a bomb (\(B=N^2/2\)). Here are the timings for varying grid sizes:</p>

<table>
  <tbody>
    <tr>
      <td><img src="/assets/minesweeper/time-array-baseline-2.png" alt="tile" /></td>
    </tr>
  </tbody>
</table>

<p>Rust outperforms C++. Lets try again with less bombs.</p>

<p><strong>Less Bombs</strong></p>

<p>Lets try with one bomb every eight position, \(B=N^2/8\). I get the following results:</p>

<table>
  <tbody>
    <tr>
      <td><img src="/assets/minesweeper/time-array-baseline-8.png" alt="tile" /></td>
    </tr>
  </tbody>
</table>

<p>The performance delta gets even larger. I’m not sure why this is happening, and it’s a bit disturbing. I fill like Rust killed C++ a little more than I wanted. I fear there might be an error in the code, but I haven’t been able to identify it. If you spot any issues, please feel free open an <a href="https://github.com/Julien5/sandbox/issues">issue</a> on github. Perhaps the Rust compiler is simply working harder to optimize, which could explain the increased compilation time. Honestly, I don’t know.</p>

<p>At this point I could call it a day and move on, but I was caught and wanted to make my minesweeper code  multithreaded. <a href="https://doc.rust-lang.org/book/ch16-00-concurrency.html">Fearless Concurrency</a> is a big selling point of Rust.</p>

<h2 id="grid-with-margin">Grid With Margin</h2>

<p>As a first step toward a concurrent algorithm, I pad the grid with margins.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><img src="/assets/minesweeper/margins.png" alt="tile" /></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">Grid padded with margins</td>
    </tr>
  </tbody>
</table>

<p>This will allow us, in the second step, to divide the grid into multiple subgrids that can be process independantly without loosing neighboors counts. And as a bonus we can eliminate bound checking. This alone  makes the code faster (in both Rust and C++). Before leaving C++ behind, lets look at the performance gain we get by eliminating bound checking when counting the bombs.</p>

<p><strong>Many bombs:</strong></p>

<table>
  <tbody>
    <tr>
      <td><img src="/assets/minesweeper/time-array-compare-2.png" alt="tile" /></td>
    </tr>
  </tbody>
</table>

<p><strong>Less bombs:</strong></p>

<table>
  <tbody>
    <tr>
      <td><img src="/assets/minesweeper/time-array-compare-8.png" alt="tile" /></td>
    </tr>
  </tbody>
</table>

<p>The speed gains in Rust and C++ are similar. The C++-margin performance is close to the Rust-baseline, striking.</p>

<p>I verified that the baseline algorithm get similar timing to the margin algorithm if I <a href="https://github.com/Julien5/sandbox/blob/master/test/rust/minesweeper/src/baseline_manipulated.rs">manipulate</a> it so to remove bound checking (I constrained the bomb positions to avoid edges). Then the timings are similar to the margin version.</p>

<p>OK, now <em>good bye C++</em>.</p>

<h2 id="going-parallel-with-tiles">Going Parallel with Tiles</h2>

<p>The idea is very simple: divide the large minesweeper grids into multiple small rectangular tiles (subgrids), as shown here:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><img src="/assets/minesweeper/tiles.png" alt="tile" /></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">Tiles for N=6,K=3 =&gt; X=6, Y=2</td>
    </tr>
  </tbody>
</table>

<p>If \(K\) is the number of tiles, each tile has dimension \((X+2) \times (Y+2)\) where \(X=N\) and \(Y=N/K\).</p>

<p>When merging the tiles for printing, we must take properly care of those edges (this is the <code class="language-plaintext highlighter-rouge">merge</code> function in <a href="https://github.com/Julien5/sandbox/blob/master/test/rust/minesweeper/src/tile.rs">tile.rs</a>). This resulting algorithm is as follows:</p>
<ol>
  <li>Determine \(K\), the number of tiles. (This could be defined by the user.)</li>
  <li>For each k in \({0,...,K-1}\):
    <ul>
      <li>Generate an array of \(B/K\) bomb positions. I call this bomb positions array a <em>bomb chunk</em> in the following.</li>
      <li>For each bomb chunk, create one tile, place the bombs and increment neighbors counts.</li>
    </ul>
  </li>
  <li>Aggregate the \(K\) tiles together and fix the counts on the tile edges.</li>
</ol>

<p>The loop at step 2 can be parallelized since the bomb chunks and the tiles are indepedant from each other. Step 3 could be integrated in step 2, fixing the counts on the fly, immediately after the tiles have been produced. But this would require a mutex, and the <a href="https://docs.rs/rayon/latest/rayon/">rayon</a> has an <a href="https://github.com/rayon-rs/rayon/issues/592">issue</a> with using mutexes.</p>

<p>Implementation with explicit for loops:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// Bchunk = B/K
fn main(X:usize,Y:usize,Bchunk:usize,K:usize,quiet:bool) {
	let mut tiles = Vec::new();
	for index in 0..K {
		let chunk=BombChunk::with_bomb_count(X,Y,index,Bchunk);
		tiles.push(make_tile(chunk));
	}
	let mut acc=TileAccumulator::init();
	for tile in tiles {
		acc.aggregate(tile);
	}
	// print ...
</code></pre></div></div>

<p>The first loop can be reformulated with iterators and <a href="https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.map"><code class="language-plaintext highlighter-rouge">map</code></a>:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	let tiles:Vec&lt;Tile&gt;=(0..K).into_iter()
		.map(|index| {
			let chunk=BombChunk::with_bomb_count(X,Y,index,Bchunk);
			make_tile(chunk)
		}).collect();
</code></pre></div></div>

<p>Thanks to the rayon crate, we just replace the standart iterator with <a href="https://docs.rs/rayon/latest/rayon/iter/index.html">parallel iterators</a> to generate bombs and make tiles concurrently:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	let tiles:Vec&lt;Tile&gt;=(0..K).into_par_iter()
		.map(|index| {
			let chunk=BombChunk::with_bomb_count(X,Y,index,Bchunk);
			make_tile(chunk)
		}).collect();
</code></pre></div></div>

<h3 id="performance-1">Performance</h3>

<p>The size of the grid is fixed to \(N=8 \times 1024\). The number of bombs is \(B=N^2/2\) and the number of chunks (or tiles) processed in parallel varies.</p>

<table>
  <tbody>
    <tr>
      <td><img src="/assets/minesweeper/time-chunks.png" alt="tile" /></td>
    </tr>
  </tbody>
</table>

<p>Well, as expected, this is faster with more chunks. And it takes less memory!</p>

<table>
  <tbody>
    <tr>
      <td><img src="/assets/minesweeper/space-chunks.png" alt="tile" /></td>
    </tr>
  </tbody>
</table>

<p>This behavior likely occurs because bomb generation is distributed over time. For instance, if chunk 2 is processed first and chunk 3 is generated later, the memory allocated for chunk 2 is freed when chunk 3 begins allocating its own memory. As a result, the peak memory usage at any given moment decreases.</p>

<h2 id="notes">Notes</h2>

<h3 id="statistical-cost-of-chunking">Statistical Cost Of Chunking</h3>

<p>Generating bomb per tile has a “statistical” cost: the probability of the bomb distribution is not uniform over the large grid anymore. For example the probability of any chunk to have more (or less) than \(B/K\) bombs is zero.</p>]]></content><author><name></name></author><category term="minesweeper" /><summary type="html"><![CDATA[In his essay On Writing, Stephen King advises aspiring writers to begin with a “situation” rather than a fully fleshed-out plot. The idea is to take a simple scenario, like a woman alone in her house with her ex-husband circling outside in the dark, and then “unpack” it to see where the story leads.]]></summary></entry></feed>