<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-04-14T14:17:07+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Hello</title><link href="http://localhost:4000/rust/2025/03/31/post.html" rel="alternate" type="text/html" title="Hello" /><published>2025-03-31T07:34:26+02:00</published><updated>2025-03-31T07:34:26+02:00</updated><id>http://localhost:4000/rust/2025/03/31/post</id><content type="html" xml:base="http://localhost:4000/rust/2025/03/31/post.html"><![CDATA[<p>This my first post. I hope it will not be too boring.</p>

<figure class="highlight"><pre><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">_2d</span><span class="p">(</span><span class="n">index</span><span class="p">:</span><span class="nb">usize</span><span class="p">,</span><span class="n">n</span><span class="p">:</span><span class="nb">usize</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="p">(</span><span class="nb">usize</span><span class="p">,</span><span class="nb">usize</span><span class="p">)</span> <span class="p">{</span>
	<span class="nd">assert!</span><span class="p">(</span><span class="n">index</span><span class="o">&lt;</span><span class="p">(</span><span class="n">n</span><span class="o">*</span><span class="n">n</span><span class="p">));</span>
	<span class="k">let</span> <span class="n">x</span><span class="o">=</span><span class="n">index</span><span class="o">%</span><span class="n">n</span><span class="p">;</span>
	<span class="k">let</span> <span class="n">y</span><span class="o">=</span><span class="n">index</span><span class="o">/</span><span class="n">n</span><span class="p">;</span>
	<span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p><a href="https://github.com/julien5">test</a></p>]]></content><author><name></name></author><category term="rust" /><summary type="html"><![CDATA[This my first post. I hope it will not be too boring. fn _2d(index:usize,n:usize) -&gt; (usize,usize) { assert!(index&lt;(n*n)); let x=index%n; let y=index/n; (x,y) }]]></summary></entry><entry><title type="html">Minesweeper (1)</title><link href="http://localhost:4000/rust/2025/03/29/post.html" rel="alternate" type="text/html" title="Minesweeper (1)" /><published>2025-03-29T08:28:19+01:00</published><updated>2025-03-29T08:28:19+01:00</updated><id>http://localhost:4000/rust/2025/03/29/post</id><content type="html" xml:base="http://localhost:4000/rust/2025/03/29/post.html"><![CDATA[<p>So, minesweeper, interview problem at my job:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Minesweeper C/C++ exercise
1. Generate a NxN Minesweeper-Board with B bombs positioned randomly.
   The parameters N and B are passed as command line arguments.
   N and B are positive integers, B is less than NxN.
  
2. For each position, display the number of bombs in the neighborhood.

Limited Time: 60 minutes.
Clarity and readability of the code will be evaluated first, correctness second.

Example:
$ ./minesweeper 5 2
board:
.*...
..*..
.....
.....
.....

neighbors:
1*21.
12*1.
.111.
.....
.....
</code></pre></div></div>

<p>So, this is just about generating a \(NxN\) square grid with \(B\) randomly positioned bombs and count the bombs. This is not about programming the game or solving it. My first version is <a href="https://github.com/Julien5/sandbox/blob/ae61a93e049e00a3115cbebe63aea0640fe2a147/test/rust/minesweeper/src/main.rs">here</a>. (Starting with rust, it took me much more than one hour to get the first working version). Nothing very exciting about this exercise, but if you think of (very) large grids, it can get interesting.</p>

<h2 id="generating-the-bombs">Generating the bombs</h2>

<p>For the \(B\) randomly positioned bombs, the first idea that comes to mind is to generate random numbers until we have \(B\) distinct numbers, like this</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		let mut set=std::collections::HashSet::new();
		while set.len() != B {
			set.insert(rng.random_range(0..N*N));
		}
</code></pre></div></div>
<p>It works, but it may be slow if \(B\) is large (close to \(N^2$.. think of the extreme case where the grid is full of bombs). (There is a trick: if\)B&gt;\frac{N^2}{2}\(we can invert the logic and generate the bomb-free positions instead of bomb positions.) I wanted a fast, deterministic algorithm, privileging [time](https://en.wikipedia.org/wiki/Time_complexity) over [space](https://en.wikipedia.org/wiki/Space_complexity) complexity, I choose the [FisherYates shuffle](https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle) which make\)B\(*distincts* random numbers out of any\)B\(random numbers, distincts or not. It has\)O(N^2)$$ space complexity (memory requirement).</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/// The position arguments is a vector with all possible positions,
/// typically: positions=(0...N*N).collect().
pub fn distinct_random_numbers(mut positions: Vec&lt;usize&gt;, b:usize) -&gt; Vec&lt;usize&gt; {
	let mut rng = StdRng::seed_from_u64(3);
	let L=positions.len();
	// Fisher-Yates
	for i in 0..b {
		let end=L-i;
		let j=rng.random_range(0..end);
		positions.swap(j,end-1);
	}
	let mut G : Vec&lt;usize&gt;=vec![0;b];
	let end=L;
	for i in 0..b  {
		G[i] = positions[end-i-1];
	}
	G
}
</code></pre></div></div>

<h2 id="counting-the-bombs">Counting the bombs</h2>

<p>Assuming \(B&lt;\frac{N^2}{2}\), it is faster to run across bomb positions than to run over all bomb-free positions:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	let Bx = distinct_random_numbers(n*n,b);
	for p in &amp;Bx {
		grid[*p]=BOMB;
		increment_neighboors(&amp;mut grid,n,*p);
	}
</code></pre></div></div>
<p>In our first approach, the grid has length \(NxN\), and we must take care of the edges when iterating over the neighbors positions. 
This makes quite many <code class="language-plaintext highlighter-rouge">if</code>s.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn increment_neighboors(grid:&amp;mut [usize], nu:usize, pos:usize) {
	// ...
	for dx in [-1,0,1] {
		let posnx=posx+dx;
		if posnx&lt;0 || posnx&gt;=n {
			continue;
		}
		for dy in [-1,0,1] {
			if dx == 0 &amp;&amp; dy == 0 {
				continue
			}
			let posny=posy+dy;
			if posny&lt;0 || posny&gt;=n {
				continue;
			}
			// ...
			// increment the neighboors count
			if grid[lu] != BOMB {
				grid[lu]+=1;
			}
		}
	}
}
</code></pre></div></div>
<p>This quite many <code class="language-plaintext highlighter-rouge">if</code>s is not very nice.</p>

<h2 id="printing-the-grid">Printing the grid</h2>

<p>Printing using <code class="language-plaintext highlighter-rouge">print!</code> or <code class="language-plaintext highlighter-rouge">println!</code> is <a href="https://users.rust-lang.org/t/efficiency-of-println-and-format/52772">slow</a>. It is much faster to write bytes directly to stdout:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn print_grid(grid:&amp;[usize], n:usize, printer : &amp;mut utils::Printer, show_count:bool) {
	let print_lookup: [u8;11] = match show_count {
		true =&gt; {
			[b' ',b'1',b'2',b'3',b'4',b'5',b'6',b'7',b'8',b'*',b' ']
		}
		_ =&gt; {
			[b' ',b' ',b' ',b' ',b' ',b' ',b' ',b' ',b' ',b'*',b' ']
		}
	};
	let mut output:Vec&lt;u8&gt; = prepare_output(n);
	for ky in 0..n {
		for kx in 0..n {
			let k=from_2d((kx,ky),n);
			output[4*kx+2]=print_lookup[grid[k] as usize];
		}
		printer.print(&amp;output);
	}
}
</code></pre></div></div>

<h2 id="chunking">Chunking</h2>

<p>Because of this, and because we want to parallelize, it makes sense to add “margins” to our grid, which gets length \((N+2)x(N+2)\).</p>

<h2 id="multithreading">Multithreading</h2>

<p>We want to avoid using mutexes as much as possible. The idea is very simple: divide the large minesweeper grids into many small tiles (subgrids) of size \((X+2)x(Y+2)\) where \(X=N\) and \(Y=N/K\). Each tile as its margin, so that we dont loose neighbors for the bomb on the tile edges. When the tiles are merged together for printing, we must take properly care of those edges. This resulting algorithm is as follows:</p>
<ol>
  <li>Determine \(K\), the number of tiles. (This could be defined by the user.)</li>
  <li>For each k in \({0,...,K-1}\):
    <ul>
      <li>generate a chunk of \(B/K\) bomb positions.</li>
      <li>for each bomb chunk, create one tile, place the bombs and increment neighbors counts.</li>
    </ul>
  </li>
  <li>Aggregate the \(K\) tiles together and fix the counts on the tile edges.</li>
</ol>

<p>Step 2 can be done with concurrency because the chunks and the tiles are indepedant from each other. 
Step 3 could be done in parallel, but not with <a href="https://docs.rs/rayon/latest/rayon/">rayon</a> because of an <a href="https://github.com/rayon-rs/rayon/issues/592">issue</a>.</p>

<p>Implementation with explicit for loops:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn main(X:usize,Y:usize,Bchunk:usize,K:usize,quiet:bool) {
	let mut tiles = Vec::new();
	for index in 0..K {
		let chunk=BombChunk::with_bomb_count(X,Y,index,Bchunk);
		tiles.push(make_tile(chunk));
	}
	let mut acc=TileAccumulator::init();
	for tile in tiles {
		acc.aggregate(tile);
	}
	// print ...
</code></pre></div></div>

<p>The first loop can be reformulated with iterators and <a href="https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.map"><code class="language-plaintext highlighter-rouge">map</code></a>:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	let tiles:Vec&lt;Tile&gt;=(0..K).into_iter()
		.map(|index| {
			let chunk=BombChunk::with_bomb_count(X,Y,index,Bchunk);
			make_tile(chunk)
		}).collect();
</code></pre></div></div>

<p>And now just replaced iterator with <a href="https://docs.rs/rayon/latest/rayon/iter/index.html">parallel iterators</a> to generate bombs and make tiles concurrently:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	let tiles:Vec&lt;Tile&gt;=(0..K).into_par_iter()
		.map(|index| {
			let chunk=BombChunk::with_bomb_count(X,Y,index,Bchunk);
			make_tile(chunk)
		}).collect();
</code></pre></div></div>

<h2 id="performance">Performance</h2>

<p><img src="http://localhost:4000/assets/minesweeper/time-chunks.png" alt="K" />
<img src="http://localhost:4000/assets/minesweeper/time-array-2.png" alt="L" />
<img src="http://localhost:4000/assets/minesweeper/time-array-8.png" alt="L" /></p>

<h2 id="notes">Notes</h2>

<h3 id="statistical-cost-of-chunking">Statistical Cost Of Chunking</h3>

<p>Generating bomb per tile has a “statistical” cost: the probability of the bomb distribution is not uniform over the large grid anymore. For example the probability of any chunk to have more (or less) than \(B/K\) bombs is zero. At this price we reduce the space complexity.</p>]]></content><author><name></name></author><category term="rust" /><summary type="html"><![CDATA[So, minesweeper, interview problem at my job: ``` Minesweeper C/C++ exercise Generate a NxN Minesweeper-Board with B bombs positioned randomly. The parameters N and B are passed as command line arguments. N and B are positive integers, B is less than NxN. For each position, display the number of bombs in the neighborhood.]]></summary></entry><entry><title type="html">Hello</title><link href="http://localhost:4000/rust/2025/03/26/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Hello" /><published>2025-03-26T20:15:26+01:00</published><updated>2025-03-26T20:15:26+01:00</updated><id>http://localhost:4000/rust/2025/03/26/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/rust/2025/03/26/welcome-to-jekyll.html"><![CDATA[<p>This my first post. I hope it will not be too boring.</p>

<figure class="highlight"><pre><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">_2d</span><span class="p">(</span><span class="n">index</span><span class="p">:</span><span class="nb">usize</span><span class="p">,</span><span class="n">n</span><span class="p">:</span><span class="nb">usize</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="p">(</span><span class="nb">usize</span><span class="p">,</span><span class="nb">usize</span><span class="p">)</span> <span class="p">{</span>
	<span class="nd">assert!</span><span class="p">(</span><span class="n">index</span><span class="o">&lt;</span><span class="p">(</span><span class="n">n</span><span class="o">*</span><span class="n">n</span><span class="p">));</span>
	<span class="k">let</span> <span class="n">x</span><span class="o">=</span><span class="n">index</span><span class="o">%</span><span class="n">n</span><span class="p">;</span>
	<span class="k">let</span> <span class="n">y</span><span class="o">=</span><span class="n">index</span><span class="o">/</span><span class="n">n</span><span class="p">;</span>
	<span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p><a href="https://github.com/julien5">test</a></p>]]></content><author><name></name></author><category term="rust" /><summary type="html"><![CDATA[This my first post. I hope it will not be too boring. fn _2d(index:usize,n:usize) -&gt; (usize,usize) { assert!(index&lt;(n*n)); let x=index%n; let y=index/n; (x,y) }]]></summary></entry></feed>