---
layout: post
title:  "Minesweeper"
date:   2025-03-29 08:28:19 +0100
categories: minesweeper
---

In his essay [*On Writing*](https://en.wikipedia.org/wiki/On_Writing:_A_Memoir_of_the_Craft), Stephen King advises aspiring writers to begin with a "situation" rather than a fully fleshed-out plot. The idea is to take a simple scenario, like a woman alone in her house with her ex-husband circling outside in the dark, and then "unpack" it to see where the story leads. 
At first glance, programming might seem worlds away from such tension-filled moments. 
Yet, if you look beneath the surface, you'll find a different kind of narrative at play. 
As [Pieter Hintjens](https://en.wikipedia.org/wiki/Pieter_Hintjens) points out in his excellent [*The Guide*](https://zguide.zeromq.org/), the world of software development is shaped by dark forces: [stupidity, selfishness, jealousy, and fear](https://zguide.zeromq.org/docs/chapter6/#Psychology-of-Software-Architecture). In my case, jealousy is at work.


A couple of years ago, each team members gave its best on a small coding challenge we use in interviews. My implementation was not the fastest. Maybe it was the slowest, maybe not, I don't remember. It was the one with the lower memory usage, but it was slow. This blog post is about trying to fix that. I'm going to take the fastest C++ code the team produced, re-implement the same algorithm using my (very modest) beginner Rust skills, and see if that beats C++. I am the husband and I have a rusty knife in the hand.

## Minesweeper

For those who don't remember what [minesweeper](https://en.wikipedia.org/wiki/Minesweeper_(video_game)) is, an image may be better than a thousand words: 

![image](/assets/minesweeper/kmines.png)

The problem is given to the candidates as follows:
```
Minesweeper C/C++ exercise
1. Generate a NxN's Minesweeper grid with B bombs positioned randomly.
   The parameters N and B are passed as command line arguments.
   N and B are positive integers, B is less than NxN.
  
2. For each position, display the number of bombs in the neighborhood.

Limited Time: 60 minutes.
Clarity and readability of the code will be evaluated first, correctness second.

Example:
$ ./minesweeper 5 2
.*...
..*..
.....
.....
.....

1*21.
12*1.
.111.
.....
.....
```
This is just about **generating** a $$N\times N$$ square grid with $$B$$ randomly positioned bombs and count the bombs. This is **not** about programming a playable game or solving it. Nothing very exciting about this exercise, but if you think of (very) large grids, it can get interesting. My first version is [here](https://github.com/Julien5/sandbox/blob/ae61a93e049e00a3115cbebe63aea0640fe2a147/test/rust/minesweeper/src/main.rs).  As a Rust beginner, it took me well over an hour to get a working prototype.

## Baseline rust version

The fastest C++ implementation among our team's C++ solutions is based on an array of length $$N\times N=N^2$$ representing the minesweeper grid, and an array of length $$B$$ with the bomb positions. I follow the same approach for the rust implementation. My initial rust version has an array with `usize` elements. The reason for `usize` is the lookup performed in [`print_grid`](#printing-the-grid), but the element type `usize` is quite large (8 bytes on my PC). In later versions, I switched to `Vec<u8>` for better memory efficiency. The main function:
```
const BOMB  : usize = 9;
const ZERO  : usize = 0;

pub fn main(N : usize, B: usize, quiet: bool) {
	let mut grid : Vec<usize> = vec![ZERO; N*N];
	let Bx = distinct_random_numbers(N * N, B);
	for p in &Bx {
		grid[*p]=BOMB;
		increment_neighboors(&mut grid,N,*p);
	}
	// printing without showing the counts
	print_grid(&grid,N,&mut printer, false);
	// printing with the counts
	print_grid(&grid,N,&mut printer, true);
}
```

### Generating the bombs

For the $$B$$ randomly positioned bombs, the first idea that comes to mind is to generate random numbers until we have $$B$$ distinct numbers, like this
```
		let mut set=std::collections::HashSet::new();
		while set.len() != B {
			set.insert(rng.random_range(0..N*N));
		}
```
That may be slow if $$B$$ is large... think of the extreme case where the grid is full of bombs. (There is a trick: if $$B>\frac{N^2}{2}$$ we can invert the logic and generate the bomb-free positions instead of bomb positions). 

I wanted a fast, deterministic algorithm that prioritizes [time](https://en.wikipedia.org/wiki/Time_complexity) over [space](https://en.wikipedia.org/wiki/Space_complexity) complexity, and chose the Fisherâ€“Yates shuffle. It makes $$B$$ *distincts* random numbers out of any $$B$$ random numbers, distincts or not. The trade-off is that it has $$O(N^2)$$ space complexity.

```
// in utils.rs
pub fn fisher_yates_shuffle(mut positions: Vec<usize>, B: usize) -> Vec<usize> {
    let mut rng = StdRng::seed_from_u64(3);
    let L = positions.len();
    for i in 0..B {
        let end = L - i;
        let j = rng.random_range(0..end);
        positions.swap(j, end - 1);
    }
    let mut G: Vec<usize> = vec![0; B];
    let end = L;
    for i in 0..B {
        G[i] = positions[end - i - 1];
    }
    G
}
// in baseline.rs
fn distinct_random_numbers(N: usize, B: usize) -> Vec<usize> {
    // populate the available positions excluding the margins.
    let positions: Vec<usize> = (0..N).collect();
    utils::fisher_yates_shuffle(positions, B)
}
```

### Counting the bombs

Assuming $$B<\frac{N^2}{2}$$, it is faster to run over bomb positions than to run over all bomb-free positions:
```
pub fn main(n : usize, b: usize, quiet: bool) {
	let mut grid : Vec<usize> = vec![ZERO; n*n];
	let Bx = distinct_random_numbers(...);
	for p in &Bx {
		grid[*p]=BOMB;
		increment_neighboors(&mut grid,n,*p);
	}
```
The grid element has length $$NxN$$, and we must take care of the edges when iterating over the neighbors positions. 
```
fn increment_neighboors(grid: &mut [usize], _N: usize, pos: usize) {
    let (posxu, posyu) = to_2d(pos, _N);
    let N = _N as isize;
    let (posx, posy) = (posxu as isize, posyu as isize);
    for dx in [-1, 0, 1] {
        let posnx = posx + dx;
        if posnx < 0 || posnx >= N {
            continue;
        }
        for dy in [-1, 0, 1] {
            if dx == 0 && dy == 0 {
                continue;
            }
            let posny = posy + dy;
            if posny < 0 || posny >= N {
                continue;
            }
            let l = posny * N + posnx;
            let lu = l as usize;
            if grid[lu] != BOMB {
                grid[lu] += 1;
            }
        }
    }
}
```
Bound checking in the two dimensions costs us two `if`. I'll come back to that later.

### Printing the grid

Printing using `print!` or `println!` is [slow](https://users.rust-lang.org/t/efficiency-of-println-and-format/52772), especially when printing large amounts of data. It is much faster to write bytes directly to standard output. I convert the grid elements to printable characters using a lookup table and print them line by line:
```
fn print_grid(grid:&[usize], n:usize, printer : &mut utils::Printer, show_count:bool) {
	let print_lookup: [u8;11] = match show_count {
		true => {
			[b' ',b'1',b'2',b'3',b'4',b'5',b'6',b'7',b'8',b'*',b' ']
		}
		_ => {
			[b' ',b' ',b' ',b' ',b' ',b' ',b' ',b' ',b' ',b'*',b' ']
		}
	};
	let mut output:Vec<u8> = prepare_output(n);
	for ky in 0..n {
		for kx in 0..n {
			let k=from_2d((kx,ky),n);
			output[4*kx+2]=print_lookup[grid[k] as usize];
		}
		printer.print(&output);
	}
}
```
The complete code is [here](https://github.com/Julien5/sandbox/blob/master/test/rust/minesweeper/src/baseline.rs). I could not help to make the output more readable with "|" as separators, even if that is a bit slower:
```
[julien@Z230] minesweeper $ cargo run -- baseline verbose 4 4
[...]
|   | * |   |   |
| * |   |   |   |
|   |   | * |   |
|   | * |   |   |
[...]
| 2 | * | 1 |   |
| * | 3 | 2 | 1 |
| 2 | 3 | * | 1 |
| 1 | * | 2 | 1 |
```

The C++ code is [here](https://github.com/Julien5/sandbox/blob/master/test/rust/minesweeper/C/), the rust code is [here](https://github.com/Julien5/sandbox/blob/master/test/rust/minesweeper/src/). The script that measure performance and produces the picture shown below is [here](https://github.com/Julien5/sandbox/blob/master/test/rust/minesweeper/measure/main.sh).

## Performance 

**Is rust faster?** It is faster. 

Well, no, we have to build the code first and rust is not faster.

|      | version      | build flags             | build time          |
|------|--------------|-------------------------|---------------------|
| Rust | rustc 1.84.0 | `cargo build --release` | 1.7 s               |
| C++  | gcc 12.2.0   | `g++ -O3 -DNDEBUG`      | 1.1 s  (`make -j8`) |

The measurements are done on a debian (bookworm) box with a i7-4470 CPU and 32 Gb RAM. The output of the processes under test is redirect to `/dev/null`.

**Many Bombs**

We populate every two position on the grid with a bomb ($$B=N^2/2$$). Here are the timings for varying grid sizes:

| ![tile](/assets/minesweeper/time-array-baseline-2.png) |

Rust beats C++. Lets try again with less bombs.

**Less Bombs**

The performance delta gets even larger, for example with $$B=N^2/8$$:

| ![tile](/assets/minesweeper/time-array-baseline-8.png) |

I'm not sure why this is happening, and it's a bit unsettling. I fill like rust killed C++ a little more than I wanted. I fear there might be an error in the code, but I haven't been able to identify it. If you spot any issues, please feel free open an [issue](https://github.com/Julien5/sandbox/issues) on github. Perhaps the Rust compiler is simply working harder to optimize, which could explain the increased compilation time. Honestly, I don't know.

At this point I could call it a day and move on, but I was caught and wanted to make my minesweeper code  multithreaded. [Fearless Concurrency](https://doc.rust-lang.org/book/ch16-00-concurrency.html) is a big selling point of rust. 

## Grid With Margin

As a first step toward a concurrent algorithm, I pad the grid with margins. 

| ![tile](/assets/minesweeper/margins.png) |
|:----------------------------------------:|
| Grid padded with margins                 |

This will allow us, in the second step, to divide the grid into multiple subgrids that can be process independantly without loosing neighboors counts. And as a bonus we can eliminate bound checking. This alone  makes the code faster (in both rust and C++). Before leaving C++ behind, lets look at the performance gain we get by eliminating bound checking:

**Many bombs:**

| ![tile](/assets/minesweeper/time-array-compare-2.png) |

**Less bombs:**

| ![tile](/assets/minesweeper/time-array-compare-8.png) |

The speed gains in rust and C++ are similar. The C++-margin performance is close to the rust-baseline, striking. 

I checked that the baseline get similar timing to the margin algorithm if I [manipulate](https://github.com/Julien5/sandbox/blob/master/test/rust/minesweeper/src/baseline-manipulated.rs) it so to remove bound checking (I constrained the bomb positions to avoid edges). Then the timings are similar to the margin version. 

OK, now *good bye C++*.

## Going Parallel with Tiles

The idea is very simple: divide the large minesweeper grids into multiple small rectangular tiles (subgrids), as shown here:

| ![tile](/assets/minesweeper/tiles.png) |
|:--------------------------------------:|
| Tiles for N=6,K=3 => X=6, Y=2          |

If $$K$$ is the number of tiles, each tile has dimension $$(X+2) \times (Y+2)$$ where $$X=N$$ and $$Y=N/K$$.

When merging the tiles for printing, we must take properly care of those edges (this is the `merge` function in [tile.rs](https://github.com/Julien5/sandbox/blob/master/test/rust/minesweeper/src/tile.rs)). This resulting algorithm is as follows:
1. Determine $$K$$, the number of tiles. (This could be defined by the user.)
2. For each k in $${0,...,K-1}$$:
   - generate a chunk of $$B/K$$ bomb positions.
   - for each bomb chunk, create one tile, place the bombs and increment neighbors counts.
3. Aggregate the $$K$$ tiles together and fix the counts on the tile edges.

The loop at step 2 can be parallelized since the chunks and the tiles are indepedant from each other. Step 3 could be integrated in step 2, fixing the counts on the fly, immediately after the tiles have been produced. But this would require a mutex, and the [rayon](https://docs.rs/rayon/latest/rayon/) has an [issue](https://github.com/rayon-rs/rayon/issues/592) with using mutexes. 

Implementation with explicit for loops:
```
// Bchunk = B/K
fn main(X:usize,Y:usize,Bchunk:usize,K:usize,quiet:bool) {
	let mut tiles = Vec::new();
	for index in 0..K {
		let chunk=BombChunk::with_bomb_count(X,Y,index,Bchunk);
		tiles.push(make_tile(chunk));
	}
	let mut acc=TileAccumulator::init();
	for tile in tiles {
		acc.aggregate(tile);
	}
	// print ...
```

The first loop can be reformulated with iterators and [`map`](https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.map):
```
	let tiles:Vec<Tile>=(0..K).into_iter()
		.map(|index| {
			let chunk=BombChunk::with_bomb_count(X,Y,index,Bchunk);
			make_tile(chunk)
		}).collect();
```

Thanks to the rayon crate, we just replace the standart iterator with [parallel iterators](https://docs.rs/rayon/latest/rayon/iter/index.html) to generate bombs and make tiles concurrently:
```
	let tiles:Vec<Tile>=(0..K).into_par_iter()
		.map(|index| {
			let chunk=BombChunk::with_bomb_count(X,Y,index,Bchunk);
			make_tile(chunk)
		}).collect();
```

### Performance

The size of the grid is fixed to $$N=8 \times 1024$$. The number of bombs is $$B=N^2/2$$ and the number of chunks (or tiles) processed in parallel varies.

| ![tile](/assets/minesweeper/time-chunks.png) |

Well, as expected, this is faster with more chunks. And it takes less memory! 

| ![tile](/assets/minesweeper/space-chunks.png) |

This behavior likely occurs because bomb generation is distributed over time. For instance, if chunk 2 is processed first and chunk 3 is generated later, the memory allocated for chunk 2 is freed when chunk 3 begins allocating its own memory. As a result, the peak memory usage at any given moment decreases.

## Notes

### Statistical Cost Of Chunking 

Generating bomb per tile has a "statistical" cost: the probability of the bomb distribution is not uniform over the large grid anymore. For example the probability of any chunk to have more (or less) than $$B/K$$ bombs is zero. At this price we reduce the space complexity.

